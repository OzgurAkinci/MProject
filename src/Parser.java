/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
  public class Parser implements ParserConstants {

/*
 | <NUM: (<DIGIT>)+>
 | <ID: (<LETTER>)+>
 | <#DIGIT: ["0"-"9"]>
 | <#LETTER: ["a"-"z", "A"-"Z"]>
*/

/*

program -> function ( program )?
function -> header ( block )? "=" body
header -> id "(" ( parlist )? ")"
block -> "{" ( stmlist )? "}"
body -> expr | eqlist
parlist -> param ( "," parlist )?
param -> id ("+" num)? | num
eqlist -> "{" expr "," bexpr "}" ( eqlist )?
stmlist -> stm ";" ( stmlist )?
stm -> id "=" expr
stm -> "print" "(" explist ")"
explist -> expr ( "," explist )?
expr -> ("+" | "-")? term ( ("+" | "-") term )*
term -> power ( ("*" | "/" | "%") power )*
power -> elem ( "^" power )?
elem -> id ( "(" ( explist )? ")" )? | num | dnum
elem -> str | "(" expr ")" | "ln" "(" expr ")"
elem -> "log" "(" expr ")" | "exp" "(" expr ")"
elem -> "sin" "(" expr ")" | "cos" "(" expr ")"
elem -> "tan" "(" expr ")" | abs "(" expr ")"
elem -> "sqrt" "(" expr ")" | "round" "(" expr ")"
elem -> "drv" "(" fcall "," ( num "," )? id ")"
fcall -> id "(" explist ")"
bexpr -> and ( "||" and )*
and -> not ( "&&" not )*
not -> "!" "(" bexpr ")" | belem | "otherwise"
belem -> expr boper expr
boper -> "==" | "!=" | "<" | "<=" | ">=" | ">"

*/
  static final public 
Program Start() throws ParseException {Program prog;
    prog = Program();
    jj_consume_token(0);
{if ("" != null) return prog;}
    throw new Error("Missing return statement in function");
}

  static final public Program Program() throws ParseException {Function def; Program prog = null;
    def = Function();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      prog = Program();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
{if ("" != null) return new Program(def, prog);}
    throw new Error("Missing return statement in function");
}

  static final public Function Function() throws ParseException {Header fn; Stm s=null; QList eq; Exp e;
    fn = Header();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LCURLY:{
      s = Block();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    eq = Body();
{if ("" != null) return new Function(fn, s, eq);}
    throw new Error("Missing return statement in function");
}

  static final public Header Header() throws ParseException {Token t; EList eq = null; boolean b = false;
    t = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:
    case NUM:{
      eq = Parlist();
b = true;
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return new Header(t.image, b ? eq : null);}
    throw new Error("Missing return statement in function");
}

  static final public Stm Block() throws ParseException {Stm s=null;
    jj_consume_token(LCURLY);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:
    case ID:{
      s = Stmlist();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(RCURLY);
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

  static final public QList Body() throws ParseException {Exp e; QList eq;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AEQ:{
      jj_consume_token(AEQ);
      e = Expr();
{if ("" != null) return new QList(new BNum(true), e, null);}
      break;
      }
    case GUARD:{
      eq = Eqlist();
{if ("" != null) return eq;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public EList Parlist() throws ParseException {EList eq = null; Exp e;
    e = Param();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      eq = Parlist();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
{if ("" != null) return new EList(e, eq);}
    throw new Error("Missing return statement in function");
}

  static final public Exp Param() throws ParseException {Token t, t2; Exp e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        t2 = jj_consume_token(NUM);
{if ("" != null) return new Plus(new Var(t.image), new Num(Integer.parseInt(t2.image)));}
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
{if ("" != null) return new Var(t.image);}
      break;
      }
    case NUM:{
      t = jj_consume_token(NUM);
{if ("" != null) return new Num(Integer.parseInt(t.image));}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public QList Eqlist() throws ParseException {Exp e; BExp b; QList eq = null;
    jj_consume_token(GUARD);
    b = BExpr();
    jj_consume_token(AEQ);
    e = Expr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GUARD:{
      eq = Eqlist();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
{if ("" != null) return new QList(b, e, eq);}
    throw new Error("Missing return statement in function");
}

  static final public BExp BExpr() throws ParseException {BExp be1, be2;
    be1 = And();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_1;
      }
      jj_consume_token(OR);
      be2 = And();
be1 = new OrExp(be1, be2);
    }
{if ("" != null) return be1;}
    throw new Error("Missing return statement in function");
}

  static final public BExp And() throws ParseException {BExp be1, be2;
    be1 = Not();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
      be2 = Not();
be1 = new AndExp(be1, be2);
    }
{if ("" != null) return be1;}
    throw new Error("Missing return statement in function");
}

  static final public BExp Not() throws ParseException {BExp be;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(LPAREN);
      be = BExpr();
      jj_consume_token(RPAREN);
{if ("" != null) return new NotExp(be);}
      break;
      }
    case PLUS:
    case MINUS:
    case LPAREN:
    case LN:
    case LOG:
    case EXP:
    case SIN:
    case COS:
    case TAN:
    case ABS:
    case SQRT:
    case ROUND:
    case DRV:
    case ID:
    case NUM:
    case DNUM:
    case STR:{
      be = Belem();
{if ("" != null) return be;}
      break;
      }
    case OTHER:{
      jj_consume_token(OTHER);
{if ("" != null) return new BNum(true);}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public BExp Belem() throws ParseException {Exp e1, e2; BExp be = null;
    e1 = Expr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
        e2 = Expr();
be = new EQExp(e1, e2);
        break;
        }
      case NE:{
        jj_consume_token(NE);
        e2 = Expr();
be = new NEExp(e1, e2);
        break;
        }
      case LE:{
        jj_consume_token(LE);
        e2 = Expr();
be = new LEExp(e1, e2);
        break;
        }
      case LT:{
        jj_consume_token(LT);
        e2 = Expr();
be = new LTExp(e1, e2);
        break;
        }
      case GT:{
        jj_consume_token(GT);
        e2 = Expr();
be = new GTExp(e1, e2);
        break;
        }
      case GE:{
        jj_consume_token(GE);
        e2 = Expr();
be = new GEExp(e1, e2);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NE:
      case LE:
      case LT:
      case GT:
      case GE:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
    }
{if ("" != null) return be;}
    throw new Error("Missing return statement in function");
}

  static final public Stm Stmlist() throws ParseException {Stm a, b;
    a = Stm();
    jj_consume_token(SEMI);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:
    case ID:{
      b = Stmlist();
a = new LStm(a,b);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

  static final public Stm Stm() throws ParseException {Token t; Exp e; BExp be; EList eq = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      t = jj_consume_token(ID);
      jj_consume_token(AEQ);
      e = Expr();
{if ("" != null) return new AStm(t.image,e);}
      break;
      }
    case PRINT:{
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case LPAREN:
      case LN:
      case LOG:
      case EXP:
      case SIN:
      case COS:
      case TAN:
      case ABS:
      case SQRT:
      case ROUND:
      case DRV:
      case ID:
      case NUM:
      case DNUM:
      case STR:{
        eq = Explist();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
{if ("" != null) return new PStm(eq);}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public EList Explist() throws ParseException {EList eq = null; Exp e;
    e = Expr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      eq = Explist();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
{if ("" != null) return new EList(e, eq);}
    throw new Error("Missing return statement in function");
}

  static final public Exp Expr() throws ParseException {Exp e1, e2; BExp b; int n=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
n=-1;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    e1 = Term();
if (n<0) e1=new Times(new Num(-1), e1);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        e2 = Term();
e1 = new Plus(e1, e2);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        e2 = Term();
e1 = new Minus(e1, e2);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

  static final public Exp Term() throws ParseException {Exp e1, e2;
    e1 = Power();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:
      case DIVIDE:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:{
        jj_consume_token(TIMES);
        e2 = Power();
e1 = new Times(e1, e2);
        break;
        }
      case DIVIDE:{
        jj_consume_token(DIVIDE);
        e2 = Power();
e1 = new Divide(e1, e2);
        break;
        }
      case MOD:{
        jj_consume_token(MOD);
        e2 = Power();
e1 = new Mod(e1, e2);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

  static final public Exp Power() throws ParseException {Exp e1, e2;
    e1 = Elem();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POWER:{
      jj_consume_token(POWER);
      e2 = Power();
e1 = new Power(e1, e2);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

  static final public Exp Elem() throws ParseException {Token t; Exp e; EList eq = null; int n=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:
        case LPAREN:
        case LN:
        case LOG:
        case EXP:
        case SIN:
        case COS:
        case TAN:
        case ABS:
        case SQRT:
        case ROUND:
        case DRV:
        case ID:
        case NUM:
        case DNUM:
        case STR:{
          eq = Explist();
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
{if ("" != null) return new Header(t.image, eq);}
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
{if ("" != null) return new Var(t.image);}
      break;
      }
    case NUM:{
      t = jj_consume_token(NUM);
{if ("" != null) return new Num(Integer.parseInt(t.image));}
      break;
      }
    case DNUM:{
      t = jj_consume_token(DNUM);
{if ("" != null) return new DNum(Double.parseDouble(t.image));}
      break;
      }
    case STR:{
      t = jj_consume_token(STR);
{if ("" != null) return new Str(t.image.substring(1,t.image.length()-1));}
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      e = Expr();
      jj_consume_token(RPAREN);
{if ("" != null) return e;}
      break;
      }
    case LN:{
      jj_consume_token(LN);
      jj_consume_token(LPAREN);
      e = Expr();
      jj_consume_token(RPAREN);
{if ("" != null) return new Ln(e);}
      break;
      }
    case LOG:{
      jj_consume_token(LOG);
      jj_consume_token(LPAREN);
      e = Expr();
      jj_consume_token(RPAREN);
{if ("" != null) return new Log(e);}
      break;
      }
    case EXP:{
      jj_consume_token(EXP);
      jj_consume_token(LPAREN);
      e = Expr();
      jj_consume_token(RPAREN);
{if ("" != null) return new Ep(e);}
      break;
      }
    case SIN:{
      jj_consume_token(SIN);
      jj_consume_token(LPAREN);
      e = Expr();
      jj_consume_token(RPAREN);
{if ("" != null) return new Sin(e);}
      break;
      }
    case COS:{
      jj_consume_token(COS);
      jj_consume_token(LPAREN);
      e = Expr();
      jj_consume_token(RPAREN);
{if ("" != null) return new Cos(e);}
      break;
      }
    case TAN:{
      jj_consume_token(TAN);
      jj_consume_token(LPAREN);
      e = Expr();
      jj_consume_token(RPAREN);
{if ("" != null) return new Tan(e);}
      break;
      }
    case ABS:{
      jj_consume_token(ABS);
      jj_consume_token(LPAREN);
      e = Expr();
      jj_consume_token(RPAREN);
{if ("" != null) return new Abs(e);}
      break;
      }
    case SQRT:{
      jj_consume_token(SQRT);
      jj_consume_token(LPAREN);
      e = Expr();
      jj_consume_token(RPAREN);
{if ("" != null) return new Sqrt(e);}
      break;
      }
    case ROUND:{
      jj_consume_token(ROUND);
      jj_consume_token(LPAREN);
      e = Expr();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        t = jj_consume_token(NUM);
n=Integer.parseInt(t.image)+1;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
{if ("" != null) return new Round(e, n-1);}
      break;
      }
    case DRV:{
      jj_consume_token(DRV);
      jj_consume_token(LPAREN);
      e = FCall();
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        t = jj_consume_token(NUM);
n=Integer.parseInt(t.image);
        jj_consume_token(COMMA);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      t = jj_consume_token(ID);
      jj_consume_token(RPAREN);
{if ("" != null) return new DrvExp(e, n, t.image);}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Exp FCall() throws ParseException {Token t; EList eq = null;
    t = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:
    case LPAREN:
    case LN:
    case LOG:
    case EXP:
    case SIN:
    case COS:
    case TAN:
    case ABS:
    case SQRT:
    case ROUND:
    case DRV:
    case ID:
    case NUM:
    case DNUM:
    case STR:{
      eq = Explist();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return new Header(t.image, eq);}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x100000,0x0,0x0,0x80400,0x20000,0x2,0x0,0x80000,0x100,0x80,0xff400206,0x1f800,0x1f800,0x0,0xff400006,0x0,0x20000,0x6,0x6,0x6,0x6,0x38,0x38,0x40,0xff400006,0x400000,0x20000,0x0,0xff400000,0xff400006,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x10,0x0,0x30,0x14,0x0,0x0,0x0,0x30,0x0,0x0,0x0,0xfb,0x0,0x0,0x14,0xf3,0x14,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf3,0x0,0x0,0x20,0xf3,0xf3,};
	}

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[44];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 31; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 44; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

                        }
